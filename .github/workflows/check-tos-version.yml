name: Check Terms of Service Version

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  check-tos-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: src/views/terms-of-service/index.html

      - name: Check if TOS changed
        id: tos-changed
        run: |
          if [[ "${{ steps.changed-files.outputs.any_changed }}" == "true" ]]; then
            echo "tos_changed=true" >> $GITHUB_OUTPUT
            echo "Terms of Service file has been modified"
          else
            echo "tos_changed=false" >> $GITHUB_OUTPUT
            echo "Terms of Service file has not been modified"
          fi

      - name: Extract version from current branch
        if: steps.tos-changed.outputs.tos_changed == 'true'
        id: current-version
        run: |
          CURRENT_VERSION=$(grep -o 'content="[^"]*"' src/views/terms-of-service/index.html | head -1 | sed 's/content="//;s/"//')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Extract version from base branch
        if: steps.tos-changed.outputs.tos_changed == 'true'
        id: base-version
        run: |
          git checkout ${{ github.event.pull_request.base.sha }}
          if [ -f "src/views/terms-of-service/index.html" ]; then
            BASE_VERSION=$(grep -o 'content="[^"]*"' src/views/terms-of-service/index.html | head -1 | sed 's/content="//;s/"//')
          else
            BASE_VERSION="file_not_exists"
          fi
          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "Base version: $BASE_VERSION"
          git checkout ${{ github.event.pull_request.head.sha }}

      - name: Compare versions
        if: steps.tos-changed.outputs.tos_changed == 'true'
        id: version-check
        run: |
          CURRENT="${{ steps.current-version.outputs.current_version }}"
          BASE="${{ steps.base-version.outputs.base_version }}"
          
          echo "Comparing versions:"
          echo "Base version: '$BASE'"
          echo "Current version: '$CURRENT'"
          
          if [[ "$CURRENT" == "$BASE" ]]; then
            echo "version_updated=false" >> $GITHUB_OUTPUT
            echo "❌ Version has NOT been updated"
          else
            echo "version_updated=true" >> $GITHUB_OUTPUT
            echo "✅ Version has been updated"
          fi

      - name: Comment on PR if version not updated
        if: steps.tos-changed.outputs.tos_changed == 'true' && steps.version-check.outputs.version_updated == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botCommentExists = comments.some(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Terms of Service version needs to be updated')
            );

            if (!botCommentExists) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `⚠️ Terms of Service Version Update Required
              });
            }

      - name: Add success comment if version updated
        if: steps.tos-changed.outputs.tos_changed == 'true' && steps.version-check.outputs.version_updated == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const successCommentExists = comments.some(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Terms of Service version has been properly updated')
            );

            if (!successCommentExists) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## ✅ Terms of Service Version Updated
              });
            }

      - name: Fail if version not updated
        if: steps.tos-changed.outputs.tos_changed == 'true' && steps.version-check.outputs.version_updated == 'false'
        run: |
          echo "❌ Terms of Service changed but version was not updated"
          echo "Please update the version in the meta tag before merging"
          exit 1
